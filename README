Some Verilator test project.

Using some patches to Verilator.



// /usr/local/share/verilator/include/verilated_vcd_c.cpp
// for extra resolution

#if 0
std::string VerilatedVcd::doubleToTimescale (double value) {
    const char* suffixp = "s";
    if	    (value>=1e0)   { suffixp="s"; value *= 1e0; }
    else if (value>=1e-3 ) { suffixp="ms"; value *= 1e3; }
    else if (value>=1e-6 ) { suffixp="us"; value *= 1e6; }
    else if (value>=1e-9 ) { suffixp="ns"; value *= 1e9; }
    else if (value>=1e-12) { suffixp="ps"; value *= 1e12; }
    else if (value>=1e-15) { suffixp="fs"; value *= 1e15; }
    else if (value>=1e-18) { suffixp="as"; value *= 1e18; }
    char valuestr[100]; sprintf(valuestr,"%3.0f%s", value, suffixp);
    return valuestr;  // Gets converted to string, so no ref to stack
}
#else
std::string VerilatedVcd::doubleToTimescale (double value) {
    const char* suffixp = "ms";
    if      (value>=1e0)   { suffixp="ms"; value *= 1e0; }
    else if (value>=1e-3 ) { suffixp="us"; value *= 1e3; }
    else if (value>=1e-6 ) { suffixp="ns"; value *= 1e6; }
    else if (value>=1e-9 ) { suffixp="ps"; value *= 1e9; }
    else if (value>=1e-12) { suffixp="fs"; value *= 1e12; }
    else if (value>=1e-15) { suffixp="as"; value *= 1e15; }
    char valuestr[100]; sprintf(valuestr,"%3.0f%s", value * 1000, suffixp);
    return valuestr;  // Gets converted to string, so no ref to stack
}
#endif



$readmemb (binary) file contains hex characters

verilated.cpp
                        // if (VL_UNLIKELY(value>=(1<<shift))) {
                        //     VL_FATAL_MT (ofilenamep.c_str(), linenum, "",
                        //                  "$readmemb (binary) file contains hex characters");
                        // }
